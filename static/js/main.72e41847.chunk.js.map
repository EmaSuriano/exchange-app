{"version":3,"sources":["utils/constant.ts","recoil/pocket.ts","recoil/exchange.ts","recoil/amount.ts","recoil/currency.ts","utils/functions.ts","components/CurrencySelector.tsx","components/ExchangeButton.tsx","components/AmountInput.tsx","components/ExchangeInfo.tsx","utils/hooks.ts","components/SwapPocketsButton.tsx","components/LastUpdateExchangeRate.tsx","App.tsx","index.tsx","recoil/initializers.ts"],"names":["ALL_CURRENCIES","USD","EUR","GBP","pocketState","atomFamily","key","default","pocketListState","selector","get","Object","entries","map","currency","name","amount","pocketOriginState","currencyOriginState","set","newValue","pocketDestinationState","currencyDestinationState","swapPocketsCallback","snapshot","a","getPromise","currencyDestination","exchangeRateState","exchange","lastUpdate","exchangeEnabledState","amountOrigin","amountOriginState","pocketOrigin","lastUpdateCurrentExchangeRateState","currentExchangeRateState","currencyOrigin","refreshExchangeRatesCallback","fetch","response","json","rates","date","console","error","amountState","atom","amountStateCreator","origin","index","DefaultValue","exchangeRate","amountDestinationState","exchangeAmountCallback","reset","pocketDestination","amountDestination","currencyState","currencyStateCreator","Array","from","includes","reverse","noop","CurrencySelector","onChange","pocketList","useRecoilValue","pocketAmount","value","evt","currentTarget","curr","showAmount","ExchangeButton","enabled","exchangeCurrency","useRecoilCallback","onClick","disabled","AmountInput","type","parseFloat","ExchangeInfo","refreshExchangeRates","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","SwapPocketsButton","swapPockets","LastUpdateExchangeRate","App","useRecoilState","setCurrencyOrigin","setCurrencyDestination","setAmountOrigin","setAmountDestination","style","display","ReactDOM","render","StrictMode","initializeState","document","getElementById"],"mappings":"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","file":"static/js/main.72e41847.chunk.js","sourcesContent":["export const POLLING_TIME = 10000;\n\nexport const ORIGIN_INDEX = 0;\nexport const DESTINATION_INDEX = 1;\n\nexport const ALL_CURRENCIES: Record<Currency, string> = {\n  USD: 'US-Dollar',\n  EUR: 'Euro',\n  GBP: 'Pound',\n};\n","import { atomFamily, selector, CallbackInterface } from 'recoil';\nimport { currencyOriginState, currencyDestinationState } from './currency';\nimport { ALL_CURRENCIES } from '../utils/constant';\n\nexport const pocketState = atomFamily<number, Currency>({\n  key: 'pocketState',\n  default: 0,\n});\n\n// selector\nexport const pocketListState = selector({\n  key: 'pocketListState',\n  get: ({ get }) => {\n    return Object.entries(ALL_CURRENCIES).map(([currency, name]) => {\n      const amount = get(pocketState(currency as Currency));\n\n      return {\n        currency,\n        name,\n        amount,\n      };\n    });\n  },\n});\n\nexport const pocketOriginState = selector<number>({\n  key: 'pocketOriginState',\n  get: ({ get }) => get(pocketState(get(currencyOriginState))),\n  set: ({ set, get }, newValue) =>\n    set(pocketState(get(currencyOriginState)), newValue),\n});\n\nexport const pocketDestinationState = selector<number>({\n  key: 'pocketDestinationState',\n  get: ({ get }) => get(pocketState(get(currencyDestinationState))),\n  set: ({ set, get }, newValue) =>\n    set(pocketState(get(currencyDestinationState)), newValue),\n});\n\n// callbacks\nexport const swapPocketsCallback = ({\n  set,\n  snapshot,\n}: CallbackInterface) => async () => {\n  const currencyDestination = await snapshot.getPromise(\n    currencyDestinationState,\n  );\n\n  set(currencyOriginState, currencyDestination);\n};\n","import { atomFamily, selector, CallbackInterface } from 'recoil';\nimport { currencyOriginState, currencyDestinationState } from './currency';\nimport { pocketOriginState } from './pocket';\nimport { amountOriginState } from './amount';\n\nconst DEFAULT_EXCHANGE_RATE = {\n  exchange: {\n    USD: 0,\n    EUR: 0,\n    GBP: 0,\n  },\n  lastUpdate: null,\n};\n\nexport const exchangeRateState = atomFamily<ExchangeRate, Currency>({\n  key: 'exchangeRateState',\n  default: DEFAULT_EXCHANGE_RATE,\n});\n\n// selector\nexport const exchangeEnabledState = selector({\n  key: 'exchangeEnabledState',\n  get: ({ get }) => {\n    const amountOrigin = get(amountOriginState);\n    const pocketOrigin = get(pocketOriginState);\n    const lastUpdate = get(lastUpdateCurrentExchangeRateState);\n\n    return amountOrigin > 0 && pocketOrigin > amountOrigin && !!lastUpdate;\n  },\n});\n\nexport const currentExchangeRateState = selector({\n  key: 'currentExchangeRateState',\n  get: ({ get }) => {\n    const currencyOrigin = get(currencyOriginState);\n    const currencyDestination = get(currencyDestinationState);\n\n    const { exchange } = get(exchangeRateState(currencyOrigin));\n    return exchange[currencyDestination];\n  },\n});\n\nexport const lastUpdateCurrentExchangeRateState = selector({\n  key: 'lastUpdateCurrentExchangeRateState',\n  get: ({ get }) => {\n    const currencyOrigin = get(currencyOriginState);\n\n    return get(exchangeRateState(currencyOrigin)).lastUpdate;\n  },\n});\n\n// callbacks\nexport const refreshExchangeRatesCallback = ({\n  set,\n  snapshot,\n}: CallbackInterface) => async () => {\n  const currency = await snapshot.getPromise(currencyOriginState);\n  try {\n    const response = await fetch(\n      `https://api.exchangeratesapi.io/latest?base=${currency}`,\n    );\n    const { rates, date } = (await response.json()) as ExchangeResponse;\n\n    set(exchangeRateState(currency), { exchange: rates, lastUpdate: date });\n  } catch (err) {\n    console.error('There was an error while trying to get exchange Rates ...');\n  }\n};\n","import { atom, selector, DefaultValue, CallbackInterface } from 'recoil';\nimport { ORIGIN_INDEX, DESTINATION_INDEX } from '../utils/constant';\nimport { currentExchangeRateState } from './exchange';\nimport { pocketOriginState, pocketDestinationState } from './pocket';\n\nexport const amountState = atom<number[]>({\n  key: 'amountState',\n  default: [0, 0],\n});\n\nconst amountStateCreator = (origin: boolean) => {\n  const index = origin ? ORIGIN_INDEX : DESTINATION_INDEX;\n  const key = origin ? 'amountOriginState' : 'amountDestinationState';\n  return selector<number>({\n    key,\n    get: ({ get }) => get(amountState)[index],\n    set: ({ set, get }, newValue) => {\n      if (newValue instanceof DefaultValue) return set(amountState, newValue);\n\n      const exchangeRate = get(currentExchangeRateState);\n      const amount = origin\n        ? [newValue, newValue * exchangeRate]\n        : [newValue / exchangeRate, newValue];\n\n      set(amountState, amount);\n    },\n  });\n};\n\nexport const amountOriginState = amountStateCreator(true);\nexport const amountDestinationState = amountStateCreator(false);\n\n// callbacks\nexport const exchangeAmountCallback = ({\n  set,\n  snapshot,\n  reset,\n}: CallbackInterface) => async () => {\n  const pocketOrigin = await snapshot.getPromise(pocketOriginState);\n  const pocketDestination = await snapshot.getPromise(pocketDestinationState);\n\n  const amountOrigin = await snapshot.getPromise(amountOriginState);\n  const amountDestination = await snapshot.getPromise(amountDestinationState);\n\n  set(pocketOriginState, pocketOrigin - amountOrigin);\n  set(pocketDestinationState, pocketDestination + amountDestination);\n\n  reset(amountOriginState);\n  reset(amountDestinationState);\n};\n","import { atom, selector, DefaultValue } from 'recoil';\nimport { ORIGIN_INDEX, DESTINATION_INDEX } from '../utils/constant';\nimport { amountState } from './amount';\n\nconst currencyState = atom<Currency[]>({\n  key: 'currencyState',\n  default: ['USD', 'EUR'],\n});\n\nconst currencyStateCreator = (origin: boolean) => {\n  const index = origin ? ORIGIN_INDEX : DESTINATION_INDEX;\n  const key = origin ? 'currencyOriginState' : 'currencyDestinationState';\n  return selector<Currency>({\n    key,\n    get: ({ get }) => get(currencyState)[index],\n    set: ({ set, get }, newValue) => {\n      if (newValue instanceof DefaultValue) return set(currencyState, newValue);\n\n      const currency = Array.from(get(currencyState));\n\n      const shouldSwapPockets = currency.includes(newValue);\n      if (shouldSwapPockets) {\n        set(currencyState, Array.from(get(currencyState)).reverse());\n        return set(amountState, Array.from(get(amountState)).reverse());\n      }\n\n      currency[index] = newValue;\n      set(currencyState, currency);\n    },\n  });\n};\n\nexport const currencyOriginState = currencyStateCreator(true);\nexport const currencyDestinationState = currencyStateCreator(false);\n","export const noop = () => false;\n","import React from 'react';\nimport { noop } from '../utils/functions';\nimport { useRecoilValue } from 'recoil';\nimport { pocketListState, pocketState } from '../recoil/pocket';\n\ntype Props = {\n  onChange?: (curr: Currency) => void;\n  currency: Currency;\n};\n\nconst CurrencySelector = ({ onChange = noop, currency }: Props) => {\n  const pocketList = useRecoilValue(pocketListState);\n  const pocketAmount = useRecoilValue(pocketState(currency));\n\n  return (\n    <div>\n      <select\n        value={currency}\n        onChange={(evt) => onChange(evt.currentTarget.value as Currency)}\n      >\n        {pocketList.map((curr) => {\n          const showAmount = currency !== curr.currency;\n          return (\n            <option value={curr.currency} key={curr.currency}>\n              {curr.name} {showAmount && `- ${curr.amount}`}\n            </option>\n          );\n        })}\n      </select>\n      {pocketAmount}\n    </div>\n  );\n};\n\nexport default CurrencySelector;\n","import React from 'react';\nimport { useRecoilValue, useRecoilCallback } from 'recoil';\nimport { exchangeEnabledState } from '../recoil/exchange';\nimport { exchangeAmountCallback } from '../recoil/amount';\n\nconst ExchangeButton = () => {\n  const enabled = useRecoilValue(exchangeEnabledState);\n  const exchangeCurrency = useRecoilCallback(exchangeAmountCallback);\n\n  return (\n    <button onClick={exchangeCurrency} disabled={!enabled}>\n      Exchange\n    </button>\n  );\n};\n\nexport default ExchangeButton;\n","import React from 'react';\nimport { noop } from '../utils/functions';\n\ntype Props = {\n  onChange?: (amount: number) => void;\n  amount: number;\n};\n\nconst AmountInput = ({ onChange = noop, amount }: Props) => {\n  return (\n    <span>\n      <input\n        type=\"number\"\n        value={amount}\n        onChange={(evt) => {\n          const { value } = evt.currentTarget;\n          const amount = parseFloat(value) || 0;\n          onChange(amount);\n        }}\n      />\n      <button onClick={() => onChange(0)}>Clear</button>\n    </span>\n  );\n};\n\nexport default AmountInput;\n","import React from 'react';\nimport { useRecoilValue, useRecoilCallback } from 'recoil';\nimport {\n  currencyOriginState,\n  currencyDestinationState,\n} from '../recoil/currency';\nimport { useInterval } from '../utils/hooks';\nimport { POLLING_TIME } from '../utils/constant';\nimport {\n  currentExchangeRateState,\n  lastUpdateCurrentExchangeRateState,\n  refreshExchangeRatesCallback,\n} from '../recoil/exchange';\n\nconst ExchangeInfo = () => {\n  const exchange = useRecoilValue(currentExchangeRateState);\n  const lastUpdate = useRecoilValue(lastUpdateCurrentExchangeRateState);\n  const currencyOrigin = useRecoilValue(currencyOriginState);\n  const currencyDestination = useRecoilValue(currencyDestinationState);\n  const refreshExchangeRates = useRecoilCallback(refreshExchangeRatesCallback);\n\n  if (!lastUpdate) refreshExchangeRates();\n\n  useInterval(() => {\n    refreshExchangeRates();\n  }, POLLING_TIME);\n\n  return (\n    <span>\n      1 {currencyOrigin} = {exchange} {currencyDestination}\n    </span>\n  );\n};\n\nexport default ExchangeInfo;\n","import { useEffect, useRef } from 'react';\n\nexport const useInterval = (callback: () => any, delay: number) => {\n  const savedCallback = useRef<() => any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current!();\n    }\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n};\n","import React from 'react';\nimport { useRecoilCallback } from 'recoil';\nimport { swapPocketsCallback } from '../recoil/pocket';\n\nconst SwapPocketsButton = () => {\n  const swapPockets = useRecoilCallback(swapPocketsCallback);\n\n  return <button onClick={swapPockets}>Swap Pockets</button>;\n};\n\nexport default SwapPocketsButton;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { lastUpdateCurrentExchangeRateState } from '../recoil/exchange';\n\nconst LastUpdateExchangeRate = () => {\n  const lastUpdate = useRecoilValue(lastUpdateCurrentExchangeRateState);\n\n  return <div>Last Update Exchange Rate: {lastUpdate}</div>;\n};\n\nexport default LastUpdateExchangeRate;\n","import React from 'react';\nimport { useRecoilState } from 'recoil';\nimport {\n  currencyOriginState,\n  currencyDestinationState,\n} from './recoil/currency';\n\nimport CurrencySelector from './components/CurrencySelector';\nimport ExchangeButton from './components/ExchangeButton';\nimport AmountInput from './components/AmountInput';\nimport ExchangeInfo from './components/ExchangeInfo';\nimport SwapPocketsButton from './components/SwapPocketsButton';\nimport LastUpdateExchangeRate from './components/LastUpdateExchangeRate';\nimport { amountOriginState, amountDestinationState } from './recoil/amount';\n\nconst App = () => {\n  const [currencyOrigin, setCurrencyOrigin] = useRecoilState(\n    currencyOriginState,\n  );\n\n  const [currencyDestination, setCurrencyDestination] = useRecoilState(\n    currencyDestinationState,\n  );\n\n  const [amountOrigin, setAmountOrigin] = useRecoilState(amountOriginState);\n  const [amountDestination, setAmountDestination] = useRecoilState(\n    amountDestinationState,\n  );\n\n  return (\n    <div>\n      <h1>Exchange App</h1>\n      <div style={{ display: 'flex' }}>\n        <CurrencySelector\n          currency={currencyOrigin}\n          onChange={setCurrencyOrigin}\n        />\n\n        <AmountInput amount={amountOrigin} onChange={setAmountOrigin} />\n      </div>\n\n      <div>\n        <SwapPocketsButton />\n        <ExchangeInfo />\n      </div>\n\n      <div>\n        <CurrencySelector\n          currency={currencyDestination}\n          onChange={setCurrencyDestination}\n        />\n\n        <AmountInput\n          amount={amountDestination}\n          onChange={setAmountDestination}\n        />\n      </div>\n\n      <ExchangeButton />\n      <LastUpdateExchangeRate />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { RecoilRoot } from 'recoil';\nimport { initializeState } from './recoil/initializers';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot initializeState={initializeState}>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import { MutableSnapshot } from 'recoil';\nimport { pocketState } from './pocket';\n\n// initializers\nexport const initializeState = ({ set }: MutableSnapshot) => {\n  set(pocketState('EUR'), 100);\n  set(pocketState('USD'), 50);\n  set(pocketState('GBP'), 0);\n};\n"],"sourceRoot":""}
{"version":3,"sources":["utils/constant.ts","recoil/pocket.ts","utils/local-storage.ts","recoil/shared-selector.ts","recoil/amount.ts","recoil/currency.ts","recoil/exchange.ts","utils/hooks.ts","components/ExchangeButton.tsx","utils/format.ts","components/ExchangeInfo.tsx","utils/functions.ts","components/ExchangeComparison.tsx","components/PocketComparison.tsx","components/ConfirmationModal.tsx","components/Tooltip.tsx","components/Footer.tsx","components/CurrencySelector.tsx","components/AmountInput.tsx","components/ExchangePanel.tsx","App.tsx","index.tsx","recoil/initializers.ts"],"names":["ALL_CURRENCIES","USD","EUR","GBP","CURRENCY_TO_TEXT","EXCHANGE_INFORMATION","pocketState","atomFamily","key","default","pocketListState","selector","get","Object","entries","map","curr","currency","name","amount","pocketOriginState","currencyOriginState","set","newValue","pocketDestinationState","currencyDestinationState","swapPocketsCallback","snapshot","a","getPromise","currencyDestination","DEFAULT_AMOUNTS","restorePocketAmount","storedValue","localStorage","getItem","parseFloat","storePocketAmount","setItem","toString","transactionOriginState","amountOriginState","transactionDestinationState","amountDestinationState","calculatePocketOriginState","calculatePocketDestinationState","amountState","atom","amountStateCreator","origin","index","DefaultValue","exchangeRate","currentExchangeRateState","exchangeAmountCallback","reset","pocketAmountOrigin","pocketAmountDestination","currencyState","currencyStateCreator","Array","from","includes","reverse","exchangeRateState","exchange","lastUpdate","exchangeEnabledState","exchangeInformationState","amountOrigin","pocketOrigin","lastUpdateCurrentExchangeRateState","currencyOrigin","refreshExchangeRatesCallback","fetch","response","json","rates","date","console","error","RESPONSIVE_VIEWPORT","useMobileViewport","useContext","ResponsiveContext","ExchangeButton","disabled","useRecoilValue","mobile","Button","size","gap","type","a11yTitle","label","icon","Update","fill","primary","formatPocket","toFixed","ExchangeInfo","refreshExchangeRates","useRecoilCallback","swapPockets","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","formatExchange","onClick","color","noop","ExchangeComparison","destination","Text","Box","align","direction","margin","justify","FormNext","PocketComparison","pocket","weight","ModalHeader","onClose","title","tag","elevation","FormClose","ConfirmationModal","onConfirm","transactionOrigin","transactionDestination","pocketDestination","onAccept","fns","x","reduceRight","v","f","compose","Layer","position","onClickOutside","onEsc","animation","responsive","modal","pad","width","secondary","Tooltip","target","children","top","undefined","left","Drop","plain","background","round","Footer","useState","over","setOver","ref","as","onMouseOver","onMouseOut","textAlign","Anchor","href","CurrencySelector","onChange","options","Select","value","labelKey","valueKey","reduce","MASK_INPUT","regexp","placeholder","fixed","length","AmountInput","decimalSeparator","setDecimalSeparator","Math","floor","decimals","split","fixedDecimals","formatAmount","FormField","MaskedInput","aria-label","mask","evt","endsWith","newAmount","ExchangePanel","useRecoilState","setCurrency","setAmount","App","modalVisible","setModalVisible","exchangeCurrency","Main","Header","Heading","Form","onSubmit","style","minWidth","ReactDOM","render","StrictMode","initializeState","Grommet","theme","grommet","full","document","getElementById"],"mappings":"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","file":"static/js/main.26b4f1fb.chunk.js","sourcesContent":["export const POLLING_TIME = 10000;\n\nexport const ORIGIN_INDEX = 0;\nexport const DESTINATION_INDEX = 1;\n\nexport const ALL_CURRENCIES: Record<Currency, string> = {\n  USD: 'US-Dollar',\n  EUR: 'Euro',\n  GBP: 'Pound',\n};\n\nexport const DECIMAL_SEPARATOR = '.';\n\nexport const THOUSAND_SEPARATOR = ',';\n\nexport const CURRENCY_TO_TEXT: Record<Currency, string> = {\n  USD: '$',\n  EUR: '€',\n  GBP: '₤',\n};\n\nexport const EXCHANGE_INFORMATION = {\n  POSSIBLE: 'Transaction possible!',\n  AMOUNT_NOT_SPECIFY: 'Specify amount to exchange ...',\n  INSUFFICIENT_AMOUNT: 'Not enough amount in your current Pocket ...',\n  EXCHANGE_RATE_NOT_FOUND: 'Exchange Rates not loaded yet ...',\n};\n\nexport const MAX_AMOUNT_EXCHANGE = 9999999999;\n\nexport const DECIMAL_AMOUNT_SUMMARY = 2;\nexport const DECIMAL_AMOUNT_EXCHANGE = 4;\n\nexport const ANIMATION_DURATION = 500;\n","import { atomFamily, selector, CallbackInterface } from 'recoil';\nimport { currencyOriginState, currencyDestinationState } from './currency';\nimport { ALL_CURRENCIES } from '../utils/constant';\n\nexport const pocketState = atomFamily<number, Currency>({\n  key: 'pocketState',\n  default: 0,\n});\n\n// selector\nexport const pocketListState = selector({\n  key: 'pocketListState',\n  get: ({ get }) => {\n    return Object.entries(ALL_CURRENCIES).map(([curr, name]) => {\n      const currency = curr as Currency;\n      const amount = get(pocketState(currency));\n\n      return {\n        currency,\n        name,\n        amount,\n      };\n    });\n  },\n});\n\nexport const pocketOriginState = selector<number>({\n  key: 'pocketOriginState',\n  get: ({ get }) => get(pocketState(get(currencyOriginState))),\n  set: ({ set, get }, newValue) =>\n    set(pocketState(get(currencyOriginState)), newValue),\n});\n\nexport const pocketDestinationState = selector<number>({\n  key: 'pocketDestinationState',\n  get: ({ get }) => get(pocketState(get(currencyDestinationState))),\n  set: ({ set, get }, newValue) =>\n    set(pocketState(get(currencyDestinationState)), newValue),\n});\n\n// callbacks\nexport const swapPocketsCallback = ({\n  set,\n  snapshot,\n}: CallbackInterface) => async () => {\n  const currencyDestination = await snapshot.getPromise(\n    currencyDestinationState,\n  );\n\n  set(currencyOriginState, currencyDestination);\n};\n","const DEFAULT_AMOUNTS = {\n  USD: 100,\n  EUR: 50,\n  GBP: 0,\n};\n\nexport const restorePocketAmount = (curr: Currency) => {\n  const storedValue = localStorage.getItem(curr);\n  if (!storedValue) return DEFAULT_AMOUNTS[curr];\n\n  return parseFloat(storedValue);\n};\n\nexport const storePocketAmount = (curr: Currency, amount: number) =>\n  localStorage.setItem(curr, amount.toString());\n","import { selector } from 'recoil';\nimport { amountOriginState, amountDestinationState } from './amount';\nimport { currencyOriginState, currencyDestinationState } from './currency';\nimport { pocketOriginState, pocketDestinationState } from './pocket';\n\nexport const transactionOriginState = selector<ExchangeTransaction>({\n  key: 'transactionOriginState',\n  get: ({ get }) => ({\n    amount: get(amountOriginState),\n    currency: get(currencyOriginState),\n  }),\n});\n\nexport const transactionDestinationState = selector<ExchangeTransaction>({\n  key: 'transactionDestinationState',\n  get: ({ get }) => ({\n    amount: get(amountDestinationState),\n    currency: get(currencyDestinationState),\n  }),\n});\n\nexport const calculatePocketOriginState = selector<Pocket>({\n  key: 'calculatePocketOriginState',\n  get: ({ get }) => ({\n    currency: get(currencyOriginState),\n    amount: get(pocketOriginState) - get(amountOriginState),\n  }),\n});\n\nexport const calculatePocketDestinationState = selector<Pocket>({\n  key: 'calculatePocketDestinationState',\n  get: ({ get }) => ({\n    currency: get(currencyDestinationState),\n    amount: get(pocketDestinationState) + get(amountDestinationState),\n  }),\n});\n","import { atom, selector, DefaultValue, CallbackInterface } from 'recoil';\nimport { ORIGIN_INDEX, DESTINATION_INDEX } from '../utils/constant';\nimport { currentExchangeRateState } from './exchange';\nimport { pocketOriginState, pocketDestinationState } from './pocket';\nimport { storePocketAmount } from '../utils/local-storage';\nimport {\n  calculatePocketOriginState,\n  calculatePocketDestinationState,\n} from './shared-selector';\n\nexport const amountState = atom<number[]>({\n  key: 'amountState',\n  default: [0, 0],\n});\n\nconst amountStateCreator = (origin: boolean) => {\n  const index = origin ? ORIGIN_INDEX : DESTINATION_INDEX;\n  const key = origin ? 'amountOriginState' : 'amountDestinationState';\n  return selector<number>({\n    key,\n    get: ({ get }) => get(amountState)[index],\n    set: ({ set, get }, newValue) => {\n      if (newValue instanceof DefaultValue) return set(amountState, newValue);\n\n      const exchangeRate = get(currentExchangeRateState);\n      const amount = origin\n        ? [newValue, newValue * exchangeRate]\n        : [newValue / exchangeRate, newValue];\n\n      set(amountState, amount);\n    },\n  });\n};\n\nexport const amountOriginState = amountStateCreator(true);\nexport const amountDestinationState = amountStateCreator(false);\n\n// callbacks\nexport const exchangeAmountCallback = ({\n  set,\n  snapshot,\n  reset,\n}: CallbackInterface) => async () => {\n  const pocketAmountOrigin = await snapshot.getPromise(\n    calculatePocketOriginState,\n  );\n  const pocketAmountDestination = await snapshot.getPromise(\n    calculatePocketDestinationState,\n  );\n\n  set(pocketOriginState, pocketAmountOrigin.amount);\n  set(pocketDestinationState, pocketAmountDestination.amount);\n\n  reset(amountOriginState);\n  reset(amountDestinationState);\n\n  storePocketAmount(pocketAmountOrigin.currency, pocketAmountOrigin.amount);\n  storePocketAmount(\n    pocketAmountDestination.currency,\n    pocketAmountDestination.amount,\n  );\n};\n","import { atom, selector, DefaultValue } from 'recoil';\nimport { ORIGIN_INDEX, DESTINATION_INDEX } from '../utils/constant';\nimport { amountState } from './amount';\n\nconst currencyState = atom<Currency[]>({\n  key: 'currencyState',\n  default: ['USD', 'EUR'],\n});\n\nconst currencyStateCreator = (origin: boolean) => {\n  const index = origin ? ORIGIN_INDEX : DESTINATION_INDEX;\n  const key = origin ? 'currencyOriginState' : 'currencyDestinationState';\n\n  return selector<Currency>({\n    key,\n    get: ({ get }) => get(currencyState)[index],\n    set: ({ set, get }, newValue) => {\n      if (newValue instanceof DefaultValue) return set(currencyState, newValue);\n\n      const currency = Array.from(get(currencyState));\n\n      const shouldSwapPockets = currency.includes(newValue);\n      if (shouldSwapPockets) {\n        set(currencyState, Array.from(get(currencyState)).reverse());\n        return set(amountState, Array.from(get(amountState)).reverse());\n      }\n\n      currency[index] = newValue;\n      set(currencyState, currency);\n    },\n  });\n};\n\nexport const currencyOriginState = currencyStateCreator(true);\nexport const currencyDestinationState = currencyStateCreator(false);\n","import { atomFamily, selector, CallbackInterface } from 'recoil';\nimport { currencyOriginState, currencyDestinationState } from './currency';\nimport { EXCHANGE_INFORMATION } from '../utils/constant';\nimport { pocketOriginState } from './pocket';\nimport { amountOriginState } from './amount';\n\nconst DEFAULT_EXCHANGE_RATE = {\n  exchange: {\n    USD: 0,\n    EUR: 0,\n    GBP: 0,\n  },\n  lastUpdate: null,\n};\n\nexport const exchangeRateState = atomFamily<ExchangeRate, Currency>({\n  key: 'exchangeRateState',\n  default: DEFAULT_EXCHANGE_RATE,\n});\n\n// selector\nexport const exchangeEnabledState = selector({\n  key: 'exchangeEnabledState',\n  get: ({ get }) =>\n    get(exchangeInformationState) === EXCHANGE_INFORMATION.POSSIBLE,\n});\n\nexport const exchangeInformationState = selector({\n  key: 'exchangeInformationState',\n  get: ({ get }) => {\n    const amountOrigin = get(amountOriginState);\n    const pocketOrigin = get(pocketOriginState);\n    const lastUpdate = get(lastUpdateCurrentExchangeRateState);\n\n    if (amountOrigin === 0) return EXCHANGE_INFORMATION.AMOUNT_NOT_SPECIFY;\n\n    if (pocketOrigin < amountOrigin)\n      return EXCHANGE_INFORMATION.INSUFFICIENT_AMOUNT;\n\n    if (!lastUpdate) return EXCHANGE_INFORMATION.EXCHANGE_RATE_NOT_FOUND;\n\n    return EXCHANGE_INFORMATION.POSSIBLE;\n  },\n});\n\nexport const currentExchangeRateState = selector({\n  key: 'currentExchangeRateState',\n  get: ({ get }) => {\n    const currencyOrigin = get(currencyOriginState);\n    const currencyDestination = get(currencyDestinationState);\n\n    const { exchange } = get(exchangeRateState(currencyOrigin));\n    return exchange[currencyDestination];\n  },\n});\n\nexport const lastUpdateCurrentExchangeRateState = selector({\n  key: 'lastUpdateCurrentExchangeRateState',\n  get: ({ get }) => {\n    const currencyOrigin = get(currencyOriginState);\n\n    return get(exchangeRateState(currencyOrigin)).lastUpdate;\n  },\n});\n\n// callbacks\nexport const refreshExchangeRatesCallback = ({\n  set,\n  snapshot,\n}: CallbackInterface) => async () => {\n  const currency = await snapshot.getPromise(currencyOriginState);\n  try {\n    const response = await fetch(\n      `https://api.exchangeratesapi.io/latest?base=${currency}`,\n    );\n    const { rates, date } = (await response.json()) as ExchangeResponse;\n\n    set(exchangeRateState(currency), { exchange: rates, lastUpdate: date });\n  } catch (err) {\n    console.error('There was an error while trying to get exchange Rates ...');\n  }\n};\n","import { useEffect, useRef, useContext } from 'react';\nimport { ResponsiveContext } from 'grommet';\n\nexport const useInterval = (callback: () => any, delay: number) => {\n  const savedCallback = useRef<() => any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current!();\n    }\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n};\n\nconst RESPONSIVE_VIEWPORT = {\n  desktop: 'large',\n  tablet: 'medium',\n  mobile: 'small',\n};\n\nexport const useMobileViewport = () => {\n  const size = useContext(ResponsiveContext);\n\n  return size === RESPONSIVE_VIEWPORT.mobile;\n};\n\nexport const useTabletViewport = () => {\n  const size = useContext(ResponsiveContext);\n  const sizes = [RESPONSIVE_VIEWPORT.mobile, RESPONSIVE_VIEWPORT.tablet];\n  return sizes.includes(size);\n};\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { exchangeEnabledState } from '../recoil/exchange';\nimport { Button } from 'grommet';\nimport { Update } from 'grommet-icons';\nimport { useMobileViewport } from '../utils/hooks';\n\nconst ExchangeButton = () => {\n  const disabled = !useRecoilValue(exchangeEnabledState);\n  const mobile = useMobileViewport();\n\n  return (\n    <Button\n      size=\"large\"\n      gap=\"medium\"\n      type=\"submit\"\n      a11yTitle=\"Exchange amount\"\n      disabled={disabled}\n      label=\"Exchange\"\n      icon={<Update />}\n      fill={mobile && 'horizontal'}\n      primary\n    />\n  );\n};\n\nexport default ExchangeButton;\n","import {\n  CURRENCY_TO_TEXT,\n  DECIMAL_AMOUNT_SUMMARY,\n  DECIMAL_AMOUNT_EXCHANGE,\n} from './constant';\n\nexport const formatPocket = ({ currency, amount }: ExchangeTransaction) =>\n  `${CURRENCY_TO_TEXT[currency]}${amount.toFixed(DECIMAL_AMOUNT_SUMMARY)}`;\n\nexport const formatExchange = ({ currency, amount }: ExchangeTransaction) =>\n  `${CURRENCY_TO_TEXT[currency]}${amount.toFixed(DECIMAL_AMOUNT_EXCHANGE)}`;\n\nexport const formatAmount = (amount: number) => {\n  if (Math.floor(amount) === amount) return amount;\n\n  const decimals = amount.toString().split('.')[1].length;\n  const fixedDecimals =\n    decimals < DECIMAL_AMOUNT_SUMMARY ? decimals : DECIMAL_AMOUNT_SUMMARY;\n\n  return amount.toFixed(fixedDecimals);\n};\n","import React from 'react';\nimport { useRecoilValue, useRecoilCallback } from 'recoil';\nimport {\n  currencyOriginState,\n  currencyDestinationState,\n} from '../recoil/currency';\nimport { useInterval } from '../utils/hooks';\nimport { POLLING_TIME, CURRENCY_TO_TEXT } from '../utils/constant';\nimport {\n  currentExchangeRateState,\n  lastUpdateCurrentExchangeRateState,\n  refreshExchangeRatesCallback,\n} from '../recoil/exchange';\nimport { Button } from 'grommet';\nimport { formatExchange } from '../utils/format';\nimport { swapPocketsCallback } from '../recoil/pocket';\n\nconst ExchangeInfo = () => {\n  const exchange = useRecoilValue(currentExchangeRateState);\n  const lastUpdate = useRecoilValue(lastUpdateCurrentExchangeRateState);\n  const currencyOrigin = useRecoilValue(currencyOriginState);\n  const currencyDestination = useRecoilValue(currencyDestinationState);\n  const refreshExchangeRates = useRecoilCallback(refreshExchangeRatesCallback);\n  const swapPockets = useRecoilCallback(swapPocketsCallback);\n\n  if (!lastUpdate) refreshExchangeRates();\n\n  useInterval(() => {\n    refreshExchangeRates();\n  }, POLLING_TIME);\n\n  const label = `${CURRENCY_TO_TEXT[currencyOrigin]}1 = ${formatExchange({\n    amount: exchange,\n    currency: currencyDestination,\n  })}`;\n\n  return (\n    <Button onClick={swapPockets} color=\"accent-1\" label={label} primary />\n  );\n};\n\nexport default ExchangeInfo;\n","export const noop = () => false;\n\nexport const compose = (...fns: Function[]) => (x: any) =>\n  fns.reduceRight((v, f) => f(v), x);\n","import React from 'react';\nimport { FormNext } from 'grommet-icons';\nimport { Text, Box } from 'grommet';\nimport { formatPocket } from '../utils/format';\n\ntype Props = {\n  origin: ExchangeTransaction;\n  destination: ExchangeTransaction;\n};\n\nconst ExchangeComparison = ({ origin, destination }: Props) => (\n  <Text size=\"xxlarge\">\n    <Box align=\"center\" direction=\"row\" margin=\"medium\" justify=\"center\">\n      {formatPocket(origin)}\n      <FormNext size=\"large\" />\n      {formatPocket(destination)}\n    </Box>\n  </Text>\n);\n\nexport default ExchangeComparison;\n","import React from 'react';\nimport { Text, Box } from 'grommet';\nimport { formatPocket } from '../utils/format';\n\ntype Props = {\n  pocket: Pocket;\n  origin: boolean;\n};\n\nconst PocketComparison = ({ pocket, origin }: Props) => (\n  <Box align=\"center\" gap=\"small\">\n    <Text size=\"large\" weight=\"bold\">\n      {pocket.currency} Pocket\n    </Text>\n    <Text size=\"large\" color={origin ? 'status-critical' : 'status-ok'}>\n      {formatPocket(pocket)}\n    </Text>\n  </Box>\n);\n\nexport default PocketComparison;\n","import React from 'react';\nimport { Layer, Button, Text, Box } from 'grommet';\nimport { useRecoilValue } from 'recoil';\nimport { FormClose } from 'grommet-icons';\nimport { compose } from '../utils/functions';\nimport ExchangeComparison from './ExchangeComparison';\nimport {\n  transactionOriginState,\n  transactionDestinationState,\n  calculatePocketOriginState,\n  calculatePocketDestinationState,\n} from '../recoil/shared-selector';\nimport PocketComparison from './PocketComparison';\n\ntype Props = {\n  onClose: () => any;\n  onConfirm: () => any;\n};\n\nconst ConfirmationModal = ({ onClose, onConfirm }: Props) => {\n  const transactionOrigin = useRecoilValue(transactionOriginState);\n  const transactionDestination = useRecoilValue(transactionDestinationState);\n\n  const pocketOrigin = useRecoilValue(calculatePocketOriginState);\n  const pocketDestination = useRecoilValue(calculatePocketDestinationState);\n\n  const onAccept = compose(onClose, onConfirm);\n\n  return (\n    <Layer\n      position=\"center\"\n      onClickOutside={onClose}\n      onEsc={onClose}\n      animation=\"slide\"\n      responsive={false}\n      margin=\"small\"\n      modal\n    >\n      <ModalHeader onClose={onClose} title=\"Confirm Transaction\" />\n      <Box gap=\"medium\" pad=\"medium\" width=\"500px\">\n        <Box>\n          <Text>Are you sure you want to exchange the following amount?</Text>\n\n          <ExchangeComparison\n            origin={transactionOrigin}\n            destination={transactionDestination}\n          />\n        </Box>\n\n        <Box>\n          <Text>Status of accounts after exchange:</Text>\n\n          <Box justify=\"around\" direction=\"row\" margin=\"medium\">\n            <PocketComparison pocket={pocketOrigin} origin={true} />\n            <PocketComparison pocket={pocketDestination} origin={false} />\n          </Box>\n        </Box>\n\n        <Box direction=\"row\" gap=\"medium\" justify=\"center\">\n          <Button secondary label=\"Cancel\" onClick={onClose} />\n          <Button primary label=\"Confirm\" onClick={onAccept} />\n        </Box>\n      </Box>\n    </Layer>\n  );\n};\n\ntype ModalHeaderProps = {\n  onClose: () => void;\n  title: string;\n};\n\nconst ModalHeader = ({ onClose, title }: ModalHeaderProps) => (\n  <Box\n    direction=\"row\"\n    align=\"center\"\n    tag=\"header\"\n    elevation=\"small\"\n    justify=\"between\"\n  >\n    <Text margin=\"small\" weight=\"bold\">\n      {title}\n    </Text>\n    <Button icon={<FormClose />} a11yTitle=\"Close button\" onClick={onClose} />\n  </Box>\n);\n\nexport default ConfirmationModal;\n","import React, { ReactNode } from 'react';\nimport { Drop, Box } from 'grommet';\n\ntype Props = {\n  target: Object;\n  children: ReactNode;\n  position: 'right' | 'bottom';\n};\n\nconst Tooltip = ({ target, children, position }: Props) => {\n  const top = position === 'bottom' ? 'bottom' : undefined;\n  const left = position === 'right' ? 'right' : undefined;\n\n  return (\n    <Drop align={{ top, left }} target={target} plain>\n      <Box margin=\"small\" pad=\"small\" background=\"accent-1\" round=\"small\">\n        {children}\n      </Box>\n    </Drop>\n  );\n};\n\nexport default Tooltip;\n","import React, { useState, useRef, Fragment } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { lastUpdateCurrentExchangeRateState } from '../recoil/exchange';\nimport { Text, Box, Anchor } from 'grommet';\nimport { useMobileViewport } from '../utils/hooks';\nimport Tooltip from './Tooltip';\n\nconst Footer = () => {\n  const lastUpdate = useRecoilValue(lastUpdateCurrentExchangeRateState);\n  const mobile = useMobileViewport();\n\n  const [over, setOver] = useState(false);\n  const ref = useRef(null);\n\n  return (\n    <Fragment>\n      <Box\n        as=\"footer\"\n        fill=\"horizontal\"\n        gap=\"medium\"\n        justify=\"between\"\n        direction={mobile ? 'column' : 'row'}\n      >\n        <Box\n          ref={ref}\n          onMouseOver={() => setOver(true)}\n          onMouseOut={() => setOver(false)}\n        >\n          <Text textAlign=\"center\">\n            Rates provided by{' '}\n            <Anchor href=\"https://exchangeratesapi.io/\">\n              Exchange Rates API\n            </Anchor>\n          </Text>\n        </Box>\n\n        <Text textAlign=\"center\">\n          Made by{' '}\n          <Anchor href=\"https://github.com/EmaSuriano\">Ema Suriano</Anchor>\n        </Text>\n      </Box>\n\n      {ref.current && over && (\n        <Tooltip target={ref.current!} position={mobile ? 'bottom' : 'right'}>\n          <Text textAlign=\"center\">\n            Last update: <b>{lastUpdate}</b>\n          </Text>\n        </Tooltip>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { noop } from '../utils/functions';\nimport { Select } from 'grommet';\n\ntype Props = {\n  onChange?: (curr: Currency) => void;\n  currency: Currency;\n  options: { label: string; value: Currency }[];\n};\n\nconst CurrencySelector = ({ onChange = noop, options, currency }: Props) => {\n  return (\n    <Select\n      a11yTitle=\"Pocket Select\"\n      value={currency}\n      options={options}\n      labelKey=\"label\"\n      valueKey={{ key: 'value', reduce: true }}\n      onChange={({ value }) => onChange(value as Currency)}\n    />\n  );\n};\n\nexport default CurrencySelector;\n","import React, { useState } from 'react';\nimport { noop } from '../utils/functions';\nimport { FormField, MaskedInput, Text } from 'grommet';\nimport {\n  DECIMAL_SEPARATOR,\n  CURRENCY_TO_TEXT,\n  MAX_AMOUNT_EXCHANGE,\n} from '../utils/constant';\nimport { formatAmount } from '../utils/format';\n\ntype Props = {\n  onChange?: (amount: number) => void;\n  amount: number;\n  label: string;\n  currency: Currency;\n};\n\nconst AmountInput = ({ onChange = noop, amount, currency, label }: Props) => {\n  const [decimalSeparator, setDecimalSeparator] = useState(false);\n\n  const onInputChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = evt.target;\n\n    setDecimalSeparator(value.endsWith(DECIMAL_SEPARATOR));\n    const newAmount = parseFloat(value) || 0;\n\n    if (newAmount === amount || newAmount > MAX_AMOUNT_EXCHANGE) return;\n\n    onChange(newAmount);\n  };\n\n  const value = decimalSeparator\n    ? `${amount}${DECIMAL_SEPARATOR}`\n    : formatAmount(amount);\n\n  return (\n    <FormField label={label}>\n      <MaskedInput\n        aria-label=\"Amount Input\"\n        size=\"xxlarge\"\n        value={value}\n        icon={<Text size=\"xxlarge\">{CURRENCY_TO_TEXT[currency]}</Text>}\n        mask={MASK_INPUT}\n        onChange={onInputChange}\n      />\n    </FormField>\n  );\n};\n\nconst MASK_INPUT = [\n  {\n    regexp: /^[0-9]*$/,\n    placeholder: '0',\n  },\n  { fixed: DECIMAL_SEPARATOR },\n  {\n    length: 2,\n    regexp: /^[0-9]*$/,\n    placeholder: '00',\n  },\n];\n\nexport default AmountInput;\n","import React from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { amountOriginState, amountDestinationState } from '../recoil/amount';\nimport {\n  currencyOriginState,\n  currencyDestinationState,\n} from '../recoil/currency';\nimport { Box } from 'grommet';\nimport CurrencySelector from './CurrencySelector';\nimport AmountInput from './AmountInput';\nimport { pocketListState } from '../recoil/pocket';\nimport { DECIMAL_AMOUNT_SUMMARY } from '../utils/constant';\n\ntype Props = {\n  origin: boolean;\n};\n\nconst ExchangePanel = ({ origin }: Props) => {\n  const [currency, setCurrency] = useRecoilState(\n    origin ? currencyOriginState : currencyDestinationState,\n  );\n  const [amount, setAmount] = useRecoilState(\n    origin ? amountOriginState : amountDestinationState,\n  );\n  const pocketList = useRecoilValue(pocketListState);\n\n  const options = pocketList.map(({ name, amount, currency }) => ({\n    label: `${name} - ${amount.toFixed(DECIMAL_AMOUNT_SUMMARY)}`,\n    value: currency,\n  }));\n\n  const label = origin ? 'Exchange' : 'Receive';\n\n  return (\n    <Box gap=\"small\">\n      <CurrencySelector\n        currency={currency}\n        onChange={setCurrency}\n        options={options}\n      />\n\n      <AmountInput\n        label={label}\n        amount={amount}\n        onChange={setAmount}\n        currency={currency}\n      />\n    </Box>\n  );\n};\n\nexport default ExchangePanel;\n","import React, { useState } from 'react';\nimport { useRecoilCallback } from 'recoil';\nimport ExchangeButton from './components/ExchangeButton';\nimport ExchangeInfo from './components/ExchangeInfo';\nimport { exchangeAmountCallback } from './recoil/amount';\nimport { Form, Header, Heading, Main, Box } from 'grommet';\nimport ConfirmationModal from './components/ConfirmationModal';\nimport Footer from './components/Footer';\nimport ExchangePanel from './components/ExchangePanel';\nimport { useMobileViewport } from './utils/hooks';\n\nconst App = () => {\n  const [modalVisible, setModalVisible] = useState(false);\n  const exchangeCurrency = useRecoilCallback(exchangeAmountCallback);\n  const mobile = useMobileViewport();\n\n  return (\n    <Main\n      fill\n      align=\"center\"\n      justify=\"center\"\n      pad=\"medium\"\n      background=\"background-front\"\n    >\n      <Header margin=\"small\">\n        <Heading>{`💸 Exchange App 💸`}</Heading>\n      </Header>\n\n      <Form onSubmit={() => setModalVisible(true)}>\n        <Box align=\"center\" justify=\"center\" gap=\"medium\" margin=\"medium\">\n          <Box\n            direction={mobile ? 'column' : 'row'}\n            align=\"center\"\n            justify=\"center\"\n            gap=\"large\"\n          >\n            <ExchangePanel origin={true} />\n            <Box gap=\"medium\" style={{ minWidth: mobile ? '100%' : '200px' }}>\n              <ExchangeInfo />\n              {!mobile && <ExchangeButton />}\n            </Box>\n            <ExchangePanel origin={false} />\n          </Box>\n          {mobile && <ExchangeButton />}\n          <Footer />\n        </Box>\n      </Form>\n\n      {modalVisible && (\n        <ConfirmationModal\n          onClose={() => setModalVisible(false)}\n          onConfirm={exchangeCurrency}\n        />\n      )}\n    </Main>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { RecoilRoot } from 'recoil';\nimport { initializeState } from './recoil/initializers';\nimport { Grommet } from 'grommet';\nimport { grommet } from 'grommet/themes';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot initializeState={initializeState}>\n      <Grommet theme={grommet} full>\n        <App />\n      </Grommet>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import { MutableSnapshot } from 'recoil';\nimport { pocketState } from './pocket';\nimport { restorePocketAmount } from '../utils/local-storage';\n\n// initializers\nexport const initializeState = ({ set }: MutableSnapshot) => {\n  set(pocketState('EUR'), restorePocketAmount('EUR'));\n  set(pocketState('USD'), restorePocketAmount('USD'));\n  set(pocketState('GBP'), restorePocketAmount('GBP'));\n};\n"],"sourceRoot":""}
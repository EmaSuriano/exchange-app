{"version":3,"sources":["recoilState.ts","utils/functions.ts","components/CurrencySelector.tsx","components/ExchangeButton.tsx","components/AmountInput.tsx","components/ExchangeRateInfo.tsx","components/SwapPocketsButton.tsx","App.tsx","index.tsx"],"names":["ALL_CURRENCIES","currency","name","pocketState","atomFamily","key","default","amountState","atom","currencyState","exchangeState","currencyStateCreator","origin","index","selector","get","set","newValue","DefaultValue","Array","from","includes","reverse","currencyOriginState","currencyDestinationState","pocketListState","map","curr","amount","exchangeEnabledState","amountOrigin","pocketOrigin","pocketOriginState","exchangeRateState","currencyOrigin","currencyDestination","find","value","amountStateCreator","exchangeRate","amountOriginState","amountDestinationState","pocketStateCreator","recoilValue","pocketDestinationState","exchangeAmountCallback","snapshot","a","getPromise","pocketDestination","amountDestination","swapPocketsCallback","currencies","amounts","noop","CurrencySelector","onChange","pocketList","useRecoilValue","pocketAmount","evt","currentTarget","showAmount","ExchangeButton","enabled","exchangeCurrency","useRecoilCallback","onClick","disabled","AmountInput","type","parseFloat","ExchangeRateInfo","SwapPocketsButton","swapPockets","App","useRecoilState","setCurrencyOrigin","setCurrencyDestination","setAmountOrigin","setAmountDestination","style","display","ReactDOM","render","StrictMode","initializeState","document","getElementById"],"mappings":"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","file":"static/js/main.fb52ddd9.chunk.js","sourcesContent":["import {\n  atom,\n  selector,\n  atomFamily,\n  DefaultValue,\n  MutableSnapshot,\n  CallbackInterface,\n} from 'recoil';\n\n// Constants\nconst ORIGIN = 0;\nconst DESTINATION = 1;\n\nconst ALL_CURRENCIES: CurrencyDetails[] = [\n  {\n    currency: 'USD',\n    name: 'US-Dollar',\n  },\n  {\n    currency: 'EUR',\n    name: 'Euro',\n  },\n  {\n    currency: 'GBP',\n    name: 'Pound',\n  },\n];\n\n// atoms\nexport const pocketState = atomFamily<number, Currency>({\n  key: 'pocketState',\n  default: 0,\n});\n\nconst amountState = atom<number[]>({\n  key: 'amountState',\n  default: [0, 0],\n});\n\nconst currencyState = atom<Currency[]>({\n  key: 'currencyState',\n  default: ['USD', 'EUR'],\n});\n\nconst exchangeState = atomFamily<ExchangeRate[], Currency>({\n  key: 'exchangeState',\n  default: [],\n});\n\n// selectors\nconst currencyStateCreator = (origin: boolean) => {\n  const index = origin ? ORIGIN : DESTINATION;\n  const key = origin ? 'currencyOriginState' : 'currencyDestinationState';\n  return selector<Currency>({\n    key,\n    get: ({ get }) => get(currencyState)[index],\n    set: ({ set, get }, newValue) => {\n      if (newValue instanceof DefaultValue) return set(currencyState, newValue);\n\n      const currency = Array.from(get(currencyState));\n\n      const shouldSwapPockets = currency.includes(newValue);\n      if (shouldSwapPockets) {\n        set(currencyState, Array.from(get(currencyState)).reverse());\n        return set(amountState, Array.from(get(amountState)).reverse());\n      }\n\n      currency[index] = newValue;\n      set(currencyState, currency);\n    },\n  });\n};\n\nexport const currencyOriginState = currencyStateCreator(true);\nexport const currencyDestinationState = currencyStateCreator(false);\n\nexport const pocketListState = selector({\n  key: 'pocketListState',\n  get: ({ get }) => {\n    return ALL_CURRENCIES.map((curr) => {\n      const amount = get(pocketState(curr.currency));\n\n      return {\n        ...curr,\n        amount: amount || 0,\n      };\n    });\n  },\n});\n\nexport const exchangeEnabledState = selector({\n  key: 'exchangeEnabledState',\n  get: ({ get }) => {\n    const amountOrigin = get(amountState)[0];\n    const pocketOrigin = get(pocketOriginState) || 0;\n\n    return amountOrigin > 0 && pocketOrigin > amountOrigin;\n  },\n});\n\nexport const exchangeRateState = selector({\n  key: 'exchangeRateState',\n  get: ({ get }) => {\n    const currencyOrigin = get(currencyOriginState);\n    const currencyDestination = get(currencyDestinationState);\n\n    const exchangeRate =\n      get(exchangeState(currencyOrigin)).find(\n        ({ currency }) => currency === currencyDestination,\n      )?.value || 1;\n\n    return exchangeRate;\n  },\n});\n\nconst amountStateCreator = (origin: boolean) => {\n  const index = origin ? ORIGIN : DESTINATION;\n  const key = origin ? 'amountOriginState' : 'amountDestinationState';\n  return selector<number>({\n    key,\n    get: ({ get }) => get(amountState)[index],\n    set: ({ set, get }, newValue) => {\n      if (newValue instanceof DefaultValue) return set(amountState, newValue);\n\n      const exchangeRate = get(exchangeRateState);\n      const amount = origin\n        ? [newValue, newValue * exchangeRate]\n        : [newValue / exchangeRate, newValue];\n\n      set(amountState, amount);\n    },\n  });\n};\n\nexport const amountOriginState = amountStateCreator(true);\nexport const amountDestinationState = amountStateCreator(false);\n\nconst pocketStateCreator = (origin: boolean) => {\n  const recoilValue = origin ? currencyOriginState : currencyDestinationState;\n  const key = origin ? 'pocketOriginState' : 'pocketDestinationState';\n  return selector<number>({\n    key,\n    get: ({ get }) => get(pocketState(get(recoilValue))),\n    set: ({ set, get }, newValue) =>\n      set(pocketState(get(recoilValue)), newValue),\n  });\n};\n\nexport const pocketOriginState = pocketStateCreator(true);\nexport const pocketDestinationState = pocketStateCreator(false);\n\n// initializers\nexport const setFakeData = ({ set }: MutableSnapshot) => {\n  set(pocketState('EUR'), 100);\n  set(pocketState('USD'), 50);\n  set(pocketState('GBP'), 0);\n};\n\n// callbacks\nexport const exchangeAmountCallback = ({\n  set,\n  snapshot,\n}: CallbackInterface) => async () => {\n  const pocketOrigin = await snapshot.getPromise(pocketOriginState);\n  const pocketDestination = await snapshot.getPromise(pocketDestinationState);\n\n  const amountOrigin = await snapshot.getPromise(amountOriginState);\n  const amountDestination = await snapshot.getPromise(amountDestinationState);\n\n  set(pocketOriginState, pocketOrigin - amountOrigin);\n  set(pocketDestinationState, pocketDestination + amountDestination);\n\n  set(amountOriginState, 0);\n  set(amountDestinationState, 0);\n};\n\nexport const swapPocketsCallback = ({\n  set,\n  snapshot,\n}: CallbackInterface) => async () => {\n  const currencies = await snapshot.getPromise(currencyState);\n  const amounts = await snapshot.getPromise(amountState);\n\n  set(currencyState, Array.from(currencies).reverse());\n  set(amountState, Array.from(amounts).reverse());\n};\n","export const noop = () => false;\n","import React from 'react';\nimport { noop } from '../utils/functions';\nimport { useRecoilValue } from 'recoil';\nimport { pocketListState, pocketState } from '../recoilState';\n\ntype Props = {\n  onChange?: (curr: Currency) => void;\n  currency: Currency;\n};\n\nconst CurrencySelector = ({ onChange = noop, currency }: Props) => {\n  const pocketList = useRecoilValue(pocketListState);\n  const pocketAmount = useRecoilValue(pocketState(currency));\n\n  return (\n    <div>\n      <select\n        value={currency}\n        onChange={(evt) => onChange(evt.currentTarget.value as Currency)}\n      >\n        {pocketList.map((curr) => {\n          const showAmount = currency !== curr.currency;\n          return (\n            <option value={curr.currency} key={curr.currency}>\n              {curr.name} {showAmount && `- ${curr.amount}`}\n            </option>\n          );\n        })}\n      </select>\n      {pocketAmount}\n    </div>\n  );\n};\n\nexport default CurrencySelector;\n","import React from 'react';\nimport { useRecoilValue, useRecoilCallback } from 'recoil';\nimport { exchangeEnabledState, exchangeAmountCallback } from '../recoilState';\n\nconst ExchangeButton = () => {\n  const enabled = useRecoilValue(exchangeEnabledState);\n  const exchangeCurrency = useRecoilCallback(exchangeAmountCallback);\n\n  return (\n    <button onClick={exchangeCurrency} disabled={!enabled}>\n      Exchange\n    </button>\n  );\n};\n\nexport default ExchangeButton;\n","import React from 'react';\nimport { noop } from '../utils/functions';\n\ntype Props = {\n  onChange?: (amount: number) => void;\n  amount: number;\n};\n\nconst AmountInput = ({ onChange = noop, amount }: Props) => {\n  return (\n    <input\n      type=\"number\"\n      value={amount}\n      onChange={(evt) => {\n        const { value } = evt.currentTarget;\n        const amount = parseFloat(value) || 0;\n        onChange(amount);\n      }}\n    />\n  );\n};\n\nexport default AmountInput;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport {\n  exchangeRateState,\n  currencyOriginState,\n  currencyDestinationState,\n} from '../recoilState';\n\nconst ExchangeRateInfo = () => {\n  const exchangeRate = useRecoilValue(exchangeRateState);\n  const currencyOrigin = useRecoilValue(currencyOriginState);\n  const currencyDestination = useRecoilValue(currencyDestinationState);\n\n  return (\n    <span>\n      1 {currencyOrigin} = {exchangeRate} {currencyDestination}\n    </span>\n  );\n};\n\nexport default ExchangeRateInfo;\n","import React from 'react';\nimport { useRecoilCallback } from 'recoil';\nimport { swapPocketsCallback } from '../recoilState';\n\nconst SwapPocketsButton = () => {\n  const swapPockets = useRecoilCallback(swapPocketsCallback);\n\n  return <button onClick={swapPockets}>Swap Pockets</button>;\n};\n\nexport default SwapPocketsButton;\n","import React from 'react';\nimport { useRecoilState } from 'recoil';\nimport {\n  currencyOriginState,\n  currencyDestinationState,\n  amountOriginState,\n  amountDestinationState,\n} from './recoilState';\nimport CurrencySelector from './components/CurrencySelector';\nimport ExchangeButton from './components/ExchangeButton';\nimport AmountInput from './components/AmountInput';\nimport ExchangeRateInfo from './components/ExchangeRateInfo';\nimport SwapPocketsButton from './components/SwapPocketsButton';\n\nconst App = () => {\n  const [currencyOrigin, setCurrencyOrigin] = useRecoilState(\n    currencyOriginState,\n  );\n\n  const [currencyDestination, setCurrencyDestination] = useRecoilState(\n    currencyDestinationState,\n  );\n\n  const [amountOrigin, setAmountOrigin] = useRecoilState(amountOriginState);\n  const [amountDestination, setAmountDestination] = useRecoilState(\n    amountDestinationState,\n  );\n\n  return (\n    <div>\n      <h1>Exchange App</h1>\n      <div style={{ display: 'flex' }}>\n        <CurrencySelector\n          currency={currencyOrigin}\n          onChange={setCurrencyOrigin}\n        />\n\n        <AmountInput amount={amountOrigin} onChange={setAmountOrigin} />\n      </div>\n\n      <div>\n        <SwapPocketsButton />\n        <ExchangeRateInfo />\n      </div>\n\n      <div>\n        <CurrencySelector\n          currency={currencyDestination}\n          onChange={setCurrencyDestination}\n        />\n\n        <AmountInput\n          amount={amountDestination}\n          onChange={setAmountDestination}\n        />\n      </div>\n\n      <ExchangeButton />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { RecoilRoot } from 'recoil';\nimport { setFakeData } from './recoilState';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot initializeState={setFakeData}>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
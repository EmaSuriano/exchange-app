{"version":3,"sources":["utils/constant.ts","recoil/pocket.ts","utils/local-storage.ts","recoil/shared-selector.ts","recoil/amount.ts","recoil/currency.ts","recoil/exchange.ts","components/ExchangeButton.tsx","utils/hooks.ts","utils/format.ts","components/ExchangeInfo.tsx","utils/functions.ts","components/ExchangeComparison.tsx","components/PocketComparison.tsx","components/ConfirmationModal.tsx","components/Footer.tsx","components/SwapPocketsButton.tsx","components/CurrencySelector.tsx","components/AmountInput.tsx","components/ExchangePanel.tsx","App.tsx","index.tsx","recoil/initializers.ts"],"names":["ALL_CURRENCIES","USD","EUR","GBP","CURRENCY_TO_TEXT","EXCHANGE_INFORMATION","pocketState","atomFamily","key","default","pocketListState","selector","get","Object","entries","map","curr","currency","name","amount","pocketOriginState","currencyOriginState","set","newValue","pocketDestinationState","currencyDestinationState","swapPocketsCallback","snapshot","a","getPromise","currencyDestination","DEFAULT_AMOUNTS","restorePocketAmount","storedValue","localStorage","getItem","parseFloat","storePocketAmount","setItem","toString","transactionOriginState","amountOriginState","transactionDestinationState","amountDestinationState","calculatePocketOriginState","calculatePocketDestinationState","amountState","atom","amountStateCreator","origin","index","DefaultValue","exchangeRate","currentExchangeRateState","exchangeAmountCallback","reset","pocketAmountOrigin","pocketAmountDestination","currencyState","currencyStateCreator","Array","from","includes","reverse","exchangeRateState","exchange","lastUpdate","exchangeEnabledState","exchangeInformationState","amountOrigin","pocketOrigin","lastUpdateCurrentExchangeRateState","currencyOrigin","refreshExchangeRatesCallback","fetch","response","json","rates","date","console","error","ExchangeButton","disabled","useRecoilValue","Button","size","primary","type","a11yTitle","label","useMobileViewport","useContext","ResponsiveContext","formatPocket","toFixed","ExchangeInfo","exchangeMap","refreshExchangeRates","useRecoilCallback","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","FormField","Text","margin","weight","formatExchange","noop","ExchangeComparison","destination","Box","align","direction","justify","FormNext","PocketComparison","color","ModalHeader","onClose","title","tag","elevation","icon","FormClose","onClick","ModalFooter","onAccept","fns","x","reduceRight","v","f","compose","onConfirm","gap","secondary","ConfirmationModal","transactionOrigin","transactionDestination","pocketDestination","Layer","position","onClickOutside","onEsc","animation","modal","Footer","mobile","as","fill","Anchor","href","SwapPocketsButton","swapPockets","RotateLeft","CurrencySelector","onChange","options","Select","value","labelKey","valueKey","reduce","AmountInput","useState","decimalSeparator","setDecimalSeparator","MaskedInput","mask","regexp","placeholder","fixed","length","evt","target","endsWith","newAmount","ExchangePanel","useRecoilState","setCurrency","setAmount","App","modalVisible","setModalVisible","exchangeCurrency","Main","pad","horizontal","Header","Heading","Form","onSubmit","ReactDOM","render","StrictMode","initializeState","Grommet","theme","grommet","document","getElementById"],"mappings":"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","file":"static/js/main.3b0bed23.chunk.js","sourcesContent":["export const POLLING_TIME = 10000;\n\nexport const ORIGIN_INDEX = 0;\nexport const DESTINATION_INDEX = 1;\n\nexport const ALL_CURRENCIES: Record<Currency, string> = {\n  USD: 'US-Dollar',\n  EUR: 'Euro',\n  GBP: 'Pound',\n};\n\nexport const DECIMAL_SEPARATOR = '.';\n\nexport const THOUSAND_SEPARATOR = ',';\n\nexport const CURRENCY_TO_TEXT: Record<Currency, string> = {\n  USD: '$',\n  EUR: '€',\n  GBP: '₤',\n};\n\nexport const EXCHANGE_INFORMATION = {\n  POSSIBLE: 'Transaction possible!',\n  AMOUNT_NOT_SPECIFY: 'Specify amount to exchange ...',\n  INSUFFICIENT_AMOUNT: 'Not enough amount in your current Pocket ...',\n  EXCHANGE_RATE_NOT_FOUND: 'Exchange Rates not loaded yet ...',\n};\n\nexport const MAX_AMOUNT_EXCHANGE = 9999999999;\n\nexport const DECIMAL_AMOUNT_SUMMARY = 2;\nexport const DECIMAL_AMOUNT_EXCHANGE = 10;\n","import { atomFamily, selector, CallbackInterface } from 'recoil';\nimport { currencyOriginState, currencyDestinationState } from './currency';\nimport { ALL_CURRENCIES } from '../utils/constant';\n\nexport const pocketState = atomFamily<number, Currency>({\n  key: 'pocketState',\n  default: 0,\n});\n\n// selector\nexport const pocketListState = selector({\n  key: 'pocketListState',\n  get: ({ get }) => {\n    return Object.entries(ALL_CURRENCIES).map(([curr, name]) => {\n      const currency = curr as Currency;\n      const amount = get(pocketState(currency));\n\n      return {\n        currency,\n        name,\n        amount,\n      };\n    });\n  },\n});\n\nexport const pocketOriginState = selector<number>({\n  key: 'pocketOriginState',\n  get: ({ get }) => get(pocketState(get(currencyOriginState))),\n  set: ({ set, get }, newValue) =>\n    set(pocketState(get(currencyOriginState)), newValue),\n});\n\nexport const pocketDestinationState = selector<number>({\n  key: 'pocketDestinationState',\n  get: ({ get }) => get(pocketState(get(currencyDestinationState))),\n  set: ({ set, get }, newValue) =>\n    set(pocketState(get(currencyDestinationState)), newValue),\n});\n\n// callbacks\nexport const swapPocketsCallback = ({\n  set,\n  snapshot,\n}: CallbackInterface) => async () => {\n  const currencyDestination = await snapshot.getPromise(\n    currencyDestinationState,\n  );\n\n  set(currencyOriginState, currencyDestination);\n};\n","const DEFAULT_AMOUNTS = {\n  USD: 100,\n  EUR: 50,\n  GBP: 0,\n};\n\nexport const restorePocketAmount = (curr: Currency) => {\n  const storedValue = localStorage.getItem(curr);\n  if (!storedValue) return DEFAULT_AMOUNTS[curr];\n\n  return parseFloat(storedValue);\n};\n\nexport const storePocketAmount = (curr: Currency, amount: number) =>\n  localStorage.setItem(curr, amount.toString());\n","import { selector } from 'recoil';\nimport { amountOriginState, amountDestinationState } from './amount';\nimport { currencyOriginState, currencyDestinationState } from './currency';\nimport { pocketOriginState, pocketDestinationState } from './pocket';\n\nexport const transactionOriginState = selector<ExchangeTransaction>({\n  key: 'transactionOriginState',\n  get: ({ get }) => ({\n    amount: get(amountOriginState),\n    currency: get(currencyOriginState),\n  }),\n});\n\nexport const transactionDestinationState = selector<ExchangeTransaction>({\n  key: 'transactionDestinationState',\n  get: ({ get }) => ({\n    amount: get(amountDestinationState),\n    currency: get(currencyDestinationState),\n  }),\n});\n\nexport const calculatePocketOriginState = selector<Pocket>({\n  key: 'calculatePocketOriginState',\n  get: ({ get }) => ({\n    currency: get(currencyOriginState),\n    amount: get(pocketOriginState) + get(amountOriginState),\n  }),\n});\n\nexport const calculatePocketDestinationState = selector<Pocket>({\n  key: 'calculatePocketDestinationState',\n  get: ({ get }) => ({\n    currency: get(currencyDestinationState),\n    amount: get(pocketDestinationState) + get(amountDestinationState),\n  }),\n});\n","import { atom, selector, DefaultValue, CallbackInterface } from 'recoil';\nimport { ORIGIN_INDEX, DESTINATION_INDEX } from '../utils/constant';\nimport { currentExchangeRateState } from './exchange';\nimport { pocketOriginState, pocketDestinationState } from './pocket';\nimport { storePocketAmount } from '../utils/local-storage';\nimport {\n  calculatePocketOriginState,\n  calculatePocketDestinationState,\n} from './shared-selector';\n\nexport const amountState = atom<number[]>({\n  key: 'amountState',\n  default: [0, 0],\n});\n\nconst amountStateCreator = (origin: boolean) => {\n  const index = origin ? ORIGIN_INDEX : DESTINATION_INDEX;\n  const key = origin ? 'amountOriginState' : 'amountDestinationState';\n  return selector<number>({\n    key,\n    get: ({ get }) => get(amountState)[index],\n    set: ({ set, get }, newValue) => {\n      if (newValue instanceof DefaultValue) return set(amountState, newValue);\n\n      const exchangeRate = get(currentExchangeRateState);\n      const amount = origin\n        ? [newValue, newValue * exchangeRate]\n        : [newValue / exchangeRate, newValue];\n\n      set(amountState, amount);\n    },\n  });\n};\n\nexport const amountOriginState = amountStateCreator(true);\nexport const amountDestinationState = amountStateCreator(false);\n\n// callbacks\nexport const exchangeAmountCallback = ({\n  set,\n  snapshot,\n  reset,\n}: CallbackInterface) => async () => {\n  const pocketAmountOrigin = await snapshot.getPromise(\n    calculatePocketOriginState,\n  );\n  const pocketAmountDestination = await snapshot.getPromise(\n    calculatePocketDestinationState,\n  );\n\n  set(pocketOriginState, pocketAmountOrigin.amount);\n  set(pocketDestinationState, pocketAmountDestination.amount);\n\n  reset(amountOriginState);\n  reset(amountDestinationState);\n\n  storePocketAmount(pocketAmountOrigin.currency, pocketAmountOrigin.amount);\n  storePocketAmount(\n    pocketAmountDestination.currency,\n    pocketAmountDestination.amount,\n  );\n};\n","import { atom, selector, DefaultValue } from 'recoil';\nimport { ORIGIN_INDEX, DESTINATION_INDEX } from '../utils/constant';\nimport { amountState } from './amount';\n\nconst currencyState = atom<Currency[]>({\n  key: 'currencyState',\n  default: ['USD', 'EUR'],\n});\n\nconst currencyStateCreator = (origin: boolean) => {\n  const index = origin ? ORIGIN_INDEX : DESTINATION_INDEX;\n  const key = origin ? 'currencyOriginState' : 'currencyDestinationState';\n  return selector<Currency>({\n    key,\n    get: ({ get }) => get(currencyState)[index],\n    set: ({ set, get }, newValue) => {\n      if (newValue instanceof DefaultValue) return set(currencyState, newValue);\n\n      const currency = Array.from(get(currencyState));\n\n      const shouldSwapPockets = currency.includes(newValue);\n      if (shouldSwapPockets) {\n        set(currencyState, Array.from(get(currencyState)).reverse());\n        return set(amountState, Array.from(get(amountState)).reverse());\n      }\n\n      currency[index] = newValue;\n      set(currencyState, currency);\n    },\n  });\n};\n\nexport const currencyOriginState = currencyStateCreator(true);\nexport const currencyDestinationState = currencyStateCreator(false);\n","import { atomFamily, selector, CallbackInterface } from 'recoil';\nimport { currencyOriginState, currencyDestinationState } from './currency';\nimport { EXCHANGE_INFORMATION } from '../utils/constant';\nimport { pocketOriginState } from './pocket';\nimport { amountOriginState } from './amount';\n\nconst DEFAULT_EXCHANGE_RATE = {\n  exchange: {\n    USD: 0,\n    EUR: 0,\n    GBP: 0,\n  },\n  lastUpdate: null,\n};\n\nexport const exchangeRateState = atomFamily<ExchangeRate, Currency>({\n  key: 'exchangeRateState',\n  default: DEFAULT_EXCHANGE_RATE,\n});\n\n// selector\nexport const exchangeEnabledState = selector({\n  key: 'exchangeEnabledState',\n  get: ({ get }) =>\n    get(exchangeInformationState) === EXCHANGE_INFORMATION.POSSIBLE,\n});\n\nexport const exchangeInformationState = selector({\n  key: 'exchangeInformationState',\n  get: ({ get }) => {\n    const amountOrigin = get(amountOriginState);\n    const pocketOrigin = get(pocketOriginState);\n    const lastUpdate = get(lastUpdateCurrentExchangeRateState);\n\n    if (amountOrigin === 0) return EXCHANGE_INFORMATION.AMOUNT_NOT_SPECIFY;\n\n    if (pocketOrigin < amountOrigin)\n      return EXCHANGE_INFORMATION.INSUFFICIENT_AMOUNT;\n\n    if (!lastUpdate) return EXCHANGE_INFORMATION.EXCHANGE_RATE_NOT_FOUND;\n\n    return EXCHANGE_INFORMATION.POSSIBLE;\n  },\n});\n\nexport const currentExchangeRateState = selector({\n  key: 'currentExchangeRateState',\n  get: ({ get }) => {\n    const currencyOrigin = get(currencyOriginState);\n    const currencyDestination = get(currencyDestinationState);\n\n    const { exchange } = get(exchangeRateState(currencyOrigin));\n    return exchange[currencyDestination];\n  },\n});\n\nexport const lastUpdateCurrentExchangeRateState = selector({\n  key: 'lastUpdateCurrentExchangeRateState',\n  get: ({ get }) => {\n    const currencyOrigin = get(currencyOriginState);\n\n    return get(exchangeRateState(currencyOrigin)).lastUpdate;\n  },\n});\n\n// callbacks\nexport const refreshExchangeRatesCallback = ({\n  set,\n  snapshot,\n}: CallbackInterface) => async () => {\n  const currency = await snapshot.getPromise(currencyOriginState);\n  try {\n    const response = await fetch(\n      `https://api.exchangeratesapi.io/latest?base=${currency}`,\n    );\n    const { rates, date } = (await response.json()) as ExchangeResponse;\n\n    set(exchangeRateState(currency), { exchange: rates, lastUpdate: date });\n  } catch (err) {\n    console.error('There was an error while trying to get exchange Rates ...');\n  }\n};\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { exchangeEnabledState } from '../recoil/exchange';\nimport { Button } from 'grommet';\n\nconst ExchangeButton = () => {\n  const disabled = !useRecoilValue(exchangeEnabledState);\n\n  return (\n    <Button\n      size=\"large\"\n      primary\n      type=\"submit\"\n      a11yTitle=\"Exchange amount\"\n      disabled={disabled}\n      label=\"Exchange\"\n    />\n  );\n};\n\nexport default ExchangeButton;\n","import { useEffect, useRef, useContext } from 'react';\nimport { ResponsiveContext } from 'grommet';\n\nexport const useInterval = (callback: () => any, delay: number) => {\n  const savedCallback = useRef<() => any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current!();\n    }\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n};\n\nexport const useMobileViewport = () => {\n  const size = useContext(ResponsiveContext);\n\n  return size === 'small';\n};\n","import {\n  CURRENCY_TO_TEXT,\n  DECIMAL_AMOUNT_SUMMARY,\n  DECIMAL_AMOUNT_EXCHANGE,\n} from './constant';\n\nexport const formatPocket = ({ currency, amount }: ExchangeTransaction) =>\n  `${CURRENCY_TO_TEXT[currency]} ${amount.toFixed(DECIMAL_AMOUNT_SUMMARY)}`;\n\nexport const formatExchange = ({ currency, amount }: ExchangeTransaction) =>\n  `${CURRENCY_TO_TEXT[currency]} ${amount.toFixed(DECIMAL_AMOUNT_EXCHANGE)}`;\n","import React from 'react';\nimport { useRecoilValue, useRecoilCallback } from 'recoil';\nimport {\n  currencyOriginState,\n  currencyDestinationState,\n} from '../recoil/currency';\nimport { useInterval } from '../utils/hooks';\nimport { POLLING_TIME, CURRENCY_TO_TEXT } from '../utils/constant';\nimport {\n  currentExchangeRateState,\n  lastUpdateCurrentExchangeRateState,\n  refreshExchangeRatesCallback,\n} from '../recoil/exchange';\nimport { FormField, Text } from 'grommet';\nimport { formatExchange } from '../utils/format';\n\nconst ExchangeInfo = () => {\n  const exchange = useRecoilValue(currentExchangeRateState);\n  const lastUpdate = useRecoilValue(lastUpdateCurrentExchangeRateState);\n  const currencyOrigin = useRecoilValue(currencyOriginState);\n  const currencyDestination = useRecoilValue(currencyDestinationState);\n\n  const exchangeMap = {\n    amount: exchange,\n    currency: currencyDestination,\n  };\n\n  const refreshExchangeRates = useRecoilCallback(refreshExchangeRatesCallback);\n\n  if (!lastUpdate) refreshExchangeRates();\n\n  useInterval(() => {\n    refreshExchangeRates();\n  }, POLLING_TIME);\n\n  return (\n    <FormField label=\"Exchange Rate\">\n      <Text margin=\"small\" weight=\"bold\">\n        {CURRENCY_TO_TEXT[currencyOrigin]} 1 = {formatExchange(exchangeMap)}\n      </Text>\n    </FormField>\n  );\n};\n\nexport default ExchangeInfo;\n","export const noop = () => false;\n\nexport const compose = (...fns: Function[]) => (x: any) =>\n  fns.reduceRight((v, f) => f(v), x);\n","import React from 'react';\nimport { FormNext } from 'grommet-icons';\nimport { Text, Box } from 'grommet';\nimport { formatPocket } from '../utils/format';\n\ntype Props = {\n  origin: ExchangeTransaction;\n  destination: ExchangeTransaction;\n};\n\nconst ExchangeComparison = ({ origin, destination }: Props) => (\n  <Text size=\"xxlarge\">\n    <Box align=\"center\" direction=\"row\" margin=\"medium\" justify=\"center\">\n      {formatPocket(origin)}\n      <FormNext size=\"large\" />\n      {formatPocket(destination)}\n    </Box>\n  </Text>\n);\n\nexport default ExchangeComparison;\n","import React from 'react';\nimport { Text, Box } from 'grommet';\nimport { formatPocket } from '../utils/format';\n\ntype Props = {\n  origin: Pocket;\n  destination: Pocket;\n};\n\nconst PocketComparison = ({ origin, destination }: Props) => (\n  <Box justify=\"around\" direction=\"row\" margin=\"medium\">\n    <Box align=\"center\">\n      <Text size=\"large\" weight=\"bold\">\n        {origin.currency} Pocket\n      </Text>\n      <Text size=\"large\" color=\"red\">\n        {formatPocket(origin)}\n      </Text>\n    </Box>\n\n    <Box align=\"center\">\n      <Text size=\"large\" weight=\"bold\">\n        {destination.currency} Pocket\n      </Text>\n      <Text size=\"large\" color=\"green\">\n        {formatPocket(destination)}\n      </Text>\n    </Box>\n  </Box>\n);\n\nexport default PocketComparison;\n","import React from 'react';\nimport { Layer, Button, Text, Box } from 'grommet';\nimport { useRecoilValue } from 'recoil';\nimport { FormClose } from 'grommet-icons';\nimport { compose } from '../utils/functions';\nimport ExchangeComparison from './ExchangeComparison';\nimport {\n  transactionOriginState,\n  transactionDestinationState,\n  calculatePocketOriginState,\n  calculatePocketDestinationState,\n} from '../recoil/shared-selector';\nimport PocketComparison from './PocketComparison';\n\ntype Props = {\n  onClose: () => any;\n  onConfirm: () => any;\n};\n\nconst ConfirmationModal = ({ onClose, onConfirm }: Props) => {\n  const transactionOrigin = useRecoilValue(transactionOriginState);\n  const transactionDestination = useRecoilValue(transactionDestinationState);\n\n  const pocketOrigin = useRecoilValue(calculatePocketOriginState);\n  const pocketDestination = useRecoilValue(calculatePocketDestinationState);\n\n  return (\n    <Layer\n      position=\"center\"\n      onClickOutside={onClose}\n      onEsc={onClose}\n      animation=\"slide\"\n      modal\n    >\n      <ModalHeader onClose={onClose} title=\"Confirm Transaction\" />\n      <Box margin=\"medium\">\n        <Text>Are you sure you want to exchange the following amount?</Text>\n\n        <ExchangeComparison\n          origin={transactionOrigin}\n          destination={transactionDestination}\n        />\n\n        <Text>Status of accounts after exchange:</Text>\n\n        <PocketComparison\n          origin={pocketOrigin}\n          destination={pocketDestination}\n        />\n\n        <ModalFooter onClose={onClose} onConfirm={onConfirm} />\n      </Box>\n    </Layer>\n  );\n};\n\ntype ModalHeaderProps = {\n  onClose: () => void;\n  title: string;\n};\n\nconst ModalHeader = ({ onClose, title }: ModalHeaderProps) => (\n  <Box\n    direction=\"row\"\n    align=\"center\"\n    tag=\"header\"\n    elevation=\"small\"\n    justify=\"between\"\n  >\n    <Text margin=\"small\" weight=\"bold\">\n      {title}\n    </Text>\n    <Button icon={<FormClose />} a11yTitle=\"Close button\" onClick={onClose} />\n  </Box>\n);\n\nconst ModalFooter = ({ onClose, onConfirm }: Props) => {\n  const onAccept = compose(onClose, onConfirm);\n\n  return (\n    <Box direction=\"row\" gap=\"medium\" justify=\"center\">\n      <Button secondary label=\"Cancel\" onClick={onClose} />\n      <Button primary label=\"Confirm\" onClick={onAccept} />\n    </Box>\n  );\n};\n\nexport default ConfirmationModal;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { lastUpdateCurrentExchangeRateState } from '../recoil/exchange';\nimport { Text, Box, Anchor } from 'grommet';\nimport { useMobileViewport } from '../utils/hooks';\n\nconst Footer = () => {\n  const lastUpdate = useRecoilValue(lastUpdateCurrentExchangeRateState);\n  const mobile = useMobileViewport();\n\n  return (\n    <Box\n      as=\"footer\"\n      direction={mobile ? 'column' : 'row'}\n      align=\"center\"\n      justify=\"between\"\n      fill=\"horizontal\"\n    >\n      <Text>Exchange Rate Update: {lastUpdate}</Text>\n      <Text>\n        Made by <Anchor href=\"https://github.com/EmaSuriano\">EmaSuriano</Anchor>\n      </Text>\n    </Box>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { useRecoilCallback } from 'recoil';\nimport { swapPocketsCallback } from '../recoil/pocket';\nimport { Button } from 'grommet';\nimport { RotateLeft } from 'grommet-icons';\n\nconst SwapPocketsButton = () => {\n  const swapPockets = useRecoilCallback(swapPocketsCallback);\n\n  return (\n    <Button\n      onClick={swapPockets}\n      primary\n      icon={<RotateLeft />}\n      a11yTitle=\"Swap Pockets\"\n    />\n  );\n};\n\nexport default SwapPocketsButton;\n","import React from 'react';\nimport { noop } from '../utils/functions';\nimport { Select } from 'grommet';\n\ntype Props = {\n  onChange?: (curr: Currency) => void;\n  currency: Currency;\n  options: { label: string; value: Currency }[];\n};\n\nconst CurrencySelector = ({ onChange = noop, options, currency }: Props) => {\n  return (\n    <Select\n      value={currency}\n      options={options}\n      labelKey=\"label\"\n      valueKey={{ key: 'value', reduce: true }}\n      onChange={({ value }) => onChange(value as Currency)}\n    />\n  );\n};\n\nexport default CurrencySelector;\n","import React, { useState } from 'react';\nimport { noop } from '../utils/functions';\nimport { FormField, MaskedInput, Text } from 'grommet';\nimport {\n  DECIMAL_SEPARATOR,\n  CURRENCY_TO_TEXT,\n  MAX_AMOUNT_EXCHANGE,\n} from '../utils/constant';\n\ntype Props = {\n  onChange?: (amount: number) => void;\n  amount: number;\n  label: string;\n  currency: Currency;\n};\n\nconst AmountInput = ({ onChange = noop, amount, currency, label }: Props) => {\n  const [decimalSeparator, setDecimalSeparator] = useState(false);\n\n  const onInputChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = evt.target;\n\n    setDecimalSeparator(value.endsWith(DECIMAL_SEPARATOR));\n    const newAmount = parseFloat(value) || 0;\n\n    if (newAmount !== amount && newAmount < MAX_AMOUNT_EXCHANGE)\n      return onChange(newAmount);\n  };\n\n  const value = `${amount}${decimalSeparator ? DECIMAL_SEPARATOR : ''}`;\n\n  return (\n    <FormField label={label}>\n      <MaskedInput\n        size=\"xxlarge\"\n        value={value}\n        icon={<Text>{CURRENCY_TO_TEXT[currency]}</Text>}\n        mask={[\n          {\n            regexp: /^[0-9]*$/,\n            placeholder: '0',\n          },\n          { fixed: DECIMAL_SEPARATOR },\n          {\n            length: 2,\n            regexp: /^[0-9]*$/,\n            placeholder: '00',\n          },\n        ]}\n        onChange={onInputChange}\n      />\n    </FormField>\n  );\n};\n\nexport default AmountInput;\n","import React from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { amountOriginState, amountDestinationState } from '../recoil/amount';\nimport {\n  currencyOriginState,\n  currencyDestinationState,\n} from '../recoil/currency';\nimport { Box } from 'grommet';\nimport CurrencySelector from './CurrencySelector';\nimport AmountInput from './AmountInput';\nimport { pocketListState } from '../recoil/pocket';\nimport { DECIMAL_AMOUNT_SUMMARY } from '../utils/constant';\n\ntype Props = {\n  origin: boolean;\n};\n\nconst ExchangePanel = ({ origin }: Props) => {\n  const [currency, setCurrency] = useRecoilState(\n    origin ? currencyOriginState : currencyDestinationState,\n  );\n  const [amount, setAmount] = useRecoilState(\n    origin ? amountOriginState : amountDestinationState,\n  );\n  const pocketList = useRecoilValue(pocketListState);\n\n  const options = pocketList.map(({ name, amount, currency }) => ({\n    label: `${name} - ${amount.toFixed(DECIMAL_AMOUNT_SUMMARY)}`,\n    value: currency,\n  }));\n\n  const label = origin ? 'Exchange' : 'Receive';\n\n  return (\n    <Box>\n      <CurrencySelector\n        currency={currency}\n        onChange={setCurrency}\n        options={options}\n      />\n\n      <AmountInput\n        label={label}\n        amount={amount}\n        onChange={setAmount}\n        currency={currency}\n      />\n    </Box>\n  );\n};\n\nexport default ExchangePanel;\n","import React, { useState } from 'react';\nimport { useRecoilCallback } from 'recoil';\nimport ExchangeButton from './components/ExchangeButton';\nimport ExchangeInfo from './components/ExchangeInfo';\nimport { exchangeAmountCallback } from './recoil/amount';\nimport { Form, Header, Heading, Main, Box } from 'grommet';\nimport ConfirmationModal from './components/ConfirmationModal';\nimport Footer from './components/Footer';\nimport SwapPocketsButton from './components/SwapPocketsButton';\nimport ExchangePanel from './components/ExchangePanel';\nimport { useMobileViewport } from './utils/hooks';\n\nconst App = () => {\n  const [modalVisible, setModalVisible] = useState(false);\n  const exchangeCurrency = useRecoilCallback(exchangeAmountCallback);\n  const mobile = useMobileViewport();\n\n  return (\n    <Main fill align=\"center\" justify=\"center\" pad={{ horizontal: 'medium' }}>\n      <Header>\n        <Heading>Exchange App</Heading>\n      </Header>\n\n      <Form onSubmit={() => setModalVisible(true)}>\n        <Box\n          direction={mobile ? 'column' : 'row'}\n          align=\"center\"\n          justify=\"center\"\n          pad=\"medium\"\n          gap=\"medium\"\n        >\n          <ExchangePanel origin={true} />\n          <SwapPocketsButton />\n          <ExchangePanel origin={false} />\n        </Box>\n\n        <Box align=\"center\" justify=\"center\" pad=\"medium\" direction=\"row\">\n          <ExchangeButton />\n          <ExchangeInfo />\n        </Box>\n      </Form>\n\n      {modalVisible && (\n        <ConfirmationModal\n          onClose={() => setModalVisible(false)}\n          onConfirm={exchangeCurrency}\n        />\n      )}\n\n      <Footer />\n    </Main>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { RecoilRoot } from 'recoil';\nimport { initializeState } from './recoil/initializers';\nimport { Grommet } from 'grommet';\nimport { grommet } from 'grommet/themes';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot initializeState={initializeState}>\n      <Grommet theme={grommet}>\n        <App />\n      </Grommet>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import { MutableSnapshot } from 'recoil';\nimport { pocketState } from './pocket';\nimport { restorePocketAmount } from '../utils/local-storage';\n\n// initializers\nexport const initializeState = ({ set }: MutableSnapshot) => {\n  set(pocketState('EUR'), restorePocketAmount('EUR'));\n  set(pocketState('USD'), restorePocketAmount('USD'));\n  set(pocketState('GBP'), restorePocketAmount('GBP'));\n};\n"],"sourceRoot":""}